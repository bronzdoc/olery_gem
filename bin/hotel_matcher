#!/usr/bin/env ruby
# vi: set ft=ruby :

require "olery"
require "pry"

$0 = "hotel_matcher"
QUEUE = Queue.new

# Define trip advisor parser
trip_advisor_parser = Proc.new do |page, word|
  divs = []
  # Get all the divs with the info we required
  page.css("div.poi-info").each { |div| divs << div }

  # Keep track of reviews, just to get the max value
  reviews = []

  # Get hotel data from divs
  hotels = []
  divs.each do |div|
    hotel_name = div.css("div.title span").text
    hotel_reviews = div.css("div.reviews").text.gsub(/[^\d]/, '').to_i
    # Insert data only if the hotel name includes the word we are looking
    if hotel_name.downcase.include?(word.downcase)
      hotels << {
        name: hotel_name,
        reviews: hotel_reviews,
        url:  div.css("a.review-count").attr("href")
      }

      reviews << hotel_reviews
    end
  end

  # The choosen hotel will be the one with the most reviews
  max_hotel = nil
  hotels.each { |hotel| max_hotel = hotel if hotel[:reviews] == reviews.max }

  puts "Queuing link #{max_hotel[:url]}"
  QUEUE << max_hotel
  puts "\n"
end

#TODO refactor parser commmon functionality
# Define booking.com parser
booking_parser = Proc.new do |page, word|
  links = page.css("a.destination_name").select do |link|
    link.text =~ /.*#{word}.*/i
  end
  next if links.nil?

  if links.size > 0
    link = links.first
    puts "Queuing link www.booking.com#{link[:href]}"
    QUEUE << link[:href]
  else
    puts "No results for word #{word}"
  end
  puts "\n"
end

# Define holiday check parser
holiday_check_parser = Proc.new do |page, word|
  links = page.css("ul#quicksearch-results").select do |link|
    link["href"] =~ /.*#{word}.*/i
  end
  next if links.nil?

  if links.size > 0
    link = links.first
    puts "Queuing link #{link[:href]}"
    QUEUE << link[:href]
  else
    puts "No results for word #{word}"
  end
  puts "\n"
end

# Configuration of scraping resources
Olery.configure do |config|
  config.add Olery::Resource.new("tripadvisor.com", "/Search", "get",  "q", {}, trip_advisor_parser)
  config.add Olery::Resource.new("booking.com", "/searchresults.en-gb.html", "get", "ss", { si: "ai,co,ci,re,di" }, booking_parser)
  config.add Olery::Resource.new("holidaycheck.de", "/schnellsuche.php", "post", "query", holiday_check_parser)
end

# Simple cli...
if ARGV.size < 1
  puts "Wrong usage of program #{$0} see --help"
  exit
elsif ARGV.first == "--help"
  puts "Hotel matcher will search for a given hotel name and print its url\n\n"
  puts "Usage:\n\s #{$0} hotel-name\t e.g #{$0} \"DoubleTree Hilton Amsterdam\""
  exit
else
  Olery::Inspector.new(ARGV.first).inspect
end
