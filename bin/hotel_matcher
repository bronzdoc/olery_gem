#!/usr/bin/env ruby
# vi: set ft=ruby :

$LOAD_PATH << File.expand_path('../../lib', __FILE__)

require "olery"

$0 = "hotel_matcher"
QUEUE = Queue.new

# TODO refactor parser commmon functionality

# Define tripadvisor.com parser
trip_advisor_parser = Proc.new do |page, word|
  divs = []
  # Get all the divs with the info we required
  page.css("div.poi-info").each { |div| divs << div }

  hotels = {}
  hotel_names = []
  md5_digest = Digest::MD5.new

  # Get hotel data from divs
  divs.each do |div|
    hotel_name = Olery::Helpers::String.trim(div.css("div.title span").text.downcase)
    hotel_names << hotel_name
    hotels[md5_digest.hexdigest(hotel_name)] = {
        name: hotel_name,
        url:  div.css("a.review-count").attr("href")
      }
  end

  best_match = Olery::Helpers::Matcher.best_match(hotel_names, word)
  unless best_match.nil?
    best_match_key = md5_digest.hexdigest(best_match)
    puts "Queuing url for hotel => ".yellow + "#{hotels[best_match_key][:name]}".green
    puts "www.tripadvisor.com#{hotels[best_match_key][:url]}".blue
    QUEUE << hotels[best_match_key][:url]
  else
    puts "No results for word #{word}".red
  end
  puts ""
end

# Define booking.com parser
booking_parser = Proc.new do |page, word|
  divs = []
  # Get all the divs with the info we required
  page.css("div#hotelWrapper div.disam-single-result").each { |div| divs << div }

  hotels = {}
  hotel_names = []
  md5_digest = Digest::MD5.new

  # Get hotel data from divs
  divs.each do |div|
    hotel_name = Olery::Helpers::String.trim(div.css("a.destination_name").text.downcase)
    hotel_names << hotel_name
    hotels[md5_digest.hexdigest(hotel_name)] = {
      name: hotel_name,
      url: div.css("a.destination_name").attr("href")
    }
  end

  best_match = Olery::Helpers::Matcher.best_match(hotel_names, word)
  unless best_match.nil?
    best_match_key = md5_digest.hexdigest(best_match)
    puts "Queuing url for hotel => ".yellow + "#{hotels[best_match_key][:name]}".green
    puts "http://www.booking.com#{hotels[best_match_key][:url]}".blue
    QUEUE << hotels[best_match_key][:url]
  else
    puts "No results for word #{word}".red
  end
  puts ""
end

# Define holidaycheck.de parser
holiday_check_parser = Proc.new do |page, word|
  # Get all the links with the info we required
  hotel_results = page.css("div#quicksearch-page ul.quicksearch-categories ul.quicksearch-results")

  # If hotels_results[2] don't contains the hotel results data, that means
  # it didn't found hotels with the user input, so we exit earlier...
  if hotel_results[2].nil?
    puts "No results for word #{word}".red
    puts ""
    next
  end

  hotel_links = hotel_results[2].css("li a")
  hotels = {}
  hotel_names = []
  md5_digest = Digest::MD5.new

  # Get hotel data from links
  hotel_links.each do |link|
    hotel_name = link.text.downcase
    hotel_names << hotel_name
    hotels[md5_digest.hexdigest(hotel_name)] = {
      name: hotel_name,
      url: link.attr("href")
    }
  end

  best_match = Olery::Helpers::Matcher.best_match(hotel_names, word)
  unless best_match.nil?
    best_match_key = md5_digest.hexdigest(best_match)
    $stdout.puts "Queuing url for hotel => ".yellow + "#{hotels[best_match_key][:name]}".green
    puts "http://www.holidaycheck.de#{hotels[best_match_key][:url]}".blue
    QUEUE << hotels[best_match_key][:url]
  else
    puts "No results for word #{word}".red
  end
  puts ""
end

# Configuration of scraping resources
Olery.configure do |config|
  config.add Olery::Resource.new("tripadvisor.com", "/Search", "get",  "q", {}, trip_advisor_parser)
  config.add Olery::Resource.new("booking.com", "/searchresults.en-gb.html", "get", "ss", { si: "ai,co,ci,re,di" }, booking_parser)
  config.add Olery::Resource.new("holidaycheck.de", "/schnellsuche.php", "get", "query", holiday_check_parser)
end


# Simple cli...
if ARGV.size < 1
  puts "Wrong usage of program #{$0} see --help"
  exit
elsif ARGV.first == "--help"
  puts "Hotel matcher will search for a given hotel name and print its url"
  puts "Usage: #{$0} hotel-name e.g #{$0} \"DoubleTree Hilton Amsterdam\""
  exit
else
  Olery::Scraper.new(ARGV.first).run
end
